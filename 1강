## 프로그래밍의 의미와 편리한 활용성

- 프로그래밍의 의미
    - 프로그래밍은 컴퓨터를 제어하여 다양한 작업을 수행하는 과정을 말함,
    - 컴퓨터는 복잡한 연산 능력을 가진 계산기이다.
- 프로그래밍의 필요성
    - 다양한 작업을 수행하기 위해서는 컴퓨터에 명령을 내려야 한다.
    - 이를 위해 프로그래밍이 필요하며, 어플리케이션 및 앱을 통해 사용한다.
- 프로그래밍 언어 기반
    - ‘JAVA’라는 언어를 기반으로 하고 컴퓨터 프로그래밍의 다양한 언어 중 하나로 포트란, C언어, C++ 등과 함께 사용된다.

---

## **프로세싱과 프로그래밍 언어 선택**

- **프로세싱 소개**
    - 프로세싱은 'JAVA' 언어를 기반으로 하며, 댄스와 이와 k 시리즈가 개발한 소프트웨어이다.
    - MIT 미디어 랩에서 개발되었으며, 현재는 프로세싱 파운데이션에서 지속적인 개발이 이루어지고 있다.
- **프로그래밍 언어 선택의 중요성**
    - 프로그래밍 언어의 선택은 사용자에게 다양한 장단점을 제공한다.
    - 프로세싱은 비주얼 아티스트와 디자이너를 위해 만들어진 소프트웨어로, 시각적 요소에 초점을 맞추고 있다.
- **프로세싱의 장점**
    - 프로세싱은 다양한 그래픽 요소를 쉽게 다룰 수 있어서 시각적 흥미를 유발한다.
    - 기초적인 프로그래밍 개념을 익히는 과정에서도 결과물을 시각적으로 확인할 수 있다.
- **기타 프로그래밍 언어와의 비교**
    - 오픈프레임워크는 프로세싱과 유사한 시각적 프로그래밍 환경을 제공하지만, C++를 베이스로 하고 있다.
    - 프로그램의 성능 최적화를 위해서는 프로그래밍 스킬을 향상시켜야 하며, 이를 위해 컴퓨터의 내부 동작과 프로세스 최적화에 대한 이해가 필요하다.
    신더(CINDER)도 시각적인것을 제작할때 사용되며 주로 기업에서 사용 됨.

---

## **프로세싱과 다른 프로그래밍 환경**

- **프로그래밍 환경 변경**
    - 프로세싱에서 프레임워크로 전환하여 성능을 향상시키는 것은 가능하며, 이를 통해 프로젝트의 결과물을 최적화할 수 있다.
- **다양한 프로그래밍 환경**
    - 오픈프레임워크와 비슷한 기능을 제공하는 머신, 터치 디자이너 등의 소프트웨어가 있다.
    - 이러한 프로그램은 주로 시각적인 요소를 다루며, 비주얼 프로그래밍 방식을 채택한다.
- **비주얼 프로그래밍 언어**
    - 비주얼 프로그래밍 언어는 블록을 조합하여 코딩하는 방식으로, 예전에는 스트레치나 엔트리 등이 유명했으며, 현재 맥스, MSP, 퓨어 데이터 등의 프로그램도 이 방식을 채택한다.

---

## **리눅스 및 오픈 소스 소프트웨어**

- **OS의 다양성**
    - 맥 OS, 윈도우, 리눅스 등이 대표적인 OS로, 리눅스는 주로 오픈 소스로 개발되는 운영 체제이다.
- **오픈 소스의 특징**
    - 오픈 소스는 코드를 공개하여 다른 사람들이 이를 활용하고 발전시킬 수 있는 구조를 가진다.
    - 이러한 개방적인 방식은 소프트웨어 개발과 공유에 유익하며, 다양한 라이브러리를 무료로 이용할 수 있다.
- **프로세싱과 라이브러리**
    - 프로세싱은 다양한 라이브러리를 활용하여 기능을 확장할 수 있으며, 대부분의 필요한 기능은 이미 라이브러리로 제공된다.

---

## **프로세싱 설치 및 실행 방법**

- **프로세싱 다운로드 및 설치**
    - 프로세싱은 공식 웹사이트에서 다운로드할 수 있다.
    - 다운로드 페이지에서 운영체제에 맞는 버전을 선택하고 다운로드하여 압축을 푼다.
- **맥 OS에서의 설치**
    - 압축을 푼 후 애플리케이션 파일을 응용 프로그램 폴더로 드래그하여 간단히 설치한다.
    - 처음 실행 시 "열기"를 클릭하여 실행하고 필요한 설정을 완료한다.
- **프로세싱 실행**
    - 실행 후 "웰컴투 프로세싱" 창이 표시되는데, 불필요한 창을 체크 해제하여 닫는다.
    - 프로세싱 폴더가 자동으로 생성되며, 여기에 코드를 저장하고 관리한다.
- **윈도우에서의 설치**
    - 윈도우용 64비트 버전을 다운로드하고 압축을 푼다.
    - 압축을 푼 파일을 원하는 폴더에 복사하여 설치를 완료한다.

---

## **프로세싱 사용 전 기본 사항**

- **프로세싱 설치 경로**
    - 프로세싱 설치 후 프로그램 폴더에 해당 애플리케이션을 실행한다.
    - 실행 후 "웰컴 창"이 표시되는데, 불필요한 창을 체크 해제하여 닫는다.
    - 프로세싱 폴더가 자동으로 생성되며, 여기에 코드를 저장하고 관리한다.
- **프로세싱의 기본 기능**
    - 프로세싱은 디자이너와 아티스트를 위한 소프트웨어로, 화면에 그림을 그리는 것에 초점을 맞추었다.
    - 화면에 점, 선, 원, 다각형 등을 그리기 위해 사용하는 명령어들이 주를 이룬다.
    - 이를 위해 좌표 체계가 필요하며, 일반적으로 수학의 그래프에서 사용되는 좌표 체계를 기반으로 한다.
- **수학적 좌표 체계**
    - 일반적으로 수학의 그래프에서는 x 축과 y 축으로 구성된 좌표 체계를 사용한다.
    - x 축은 오른쪽으로 갈수록 숫자가 커지고, 왼쪽으로 갈수록 숫자가 작아진다.
    - y 축은 위로 갈수록 숫자가 커지고, 아래로 갈수록 숫자가 작아진다.
    - 중심점은 (0, 0)이며, 아래쪽과 왼쪽은 음수, 위쪽과 오른쪽은 양수이다.

---

## **컴퓨터 그래픽의 좌표 체계**

- **좌표 체계의 시작점**
    - 컴퓨터 그래픽에서의 좌측 상단이 (0, 0)으로 시작한다.
    - x 축은 오른쪽으로 갈수록 값이 커지고, y 축은 아래로 내려갈수록 값이 커진다.
- **화면의 픽셀**
    - 화면은 정사각형의 픽셀들로 구성되어 있다.
    - 레티나 디스플레이와 같은 고해상도 모니터를 사용하면 픽셀의 크기가 작아진다.
    - 그러나 기본적으로 화면을 픽셀 단위로 그리며, 좌측 상단을 기준으로 픽셀 단위로 위치를 지정한다.
- **프로세싱 설정**
    - 환경 설정에서 세팅을 맞추어야 한다.
    - 맥에서는 Preferences를, 윈도우에서는 Settings를 열 수 있다.

---

## **코딩에 사용되는 글꼴 선택**

- 코딩에는 고정폭 글꼴이 적합하다.
- 한글이 제대로 표시되는 '나눔 고딕 코딩' 글꼴을 추천한다.

**글꼴 설정 방법**

1. '나눔 고딕 코딩' 글꼴을 다운로드하여 설치한다.
2. 프로세싱을 종료하고 다시 실행한다.
3. 설정 창에서 '나눔고딕 코딩' 글꼴을 선택한다.

**코딩 글꼴의 장점**

- 숫자 '0'과 영문 대문자 'O'를 구분하기 쉽다.
- 보통 숫자 '0'는 사선으로 표시되어 있어 헷갈리지 않는다.

---

## **프로세싱 환경 설정**

1. 코딩에 사용할 글꼴 선택: '나눔고딕 코딩' 글꼴을 권장하며, 다른 글꼴도 선택 가능하다.
2. 글꼴 크기 설정: 편한 크기로 선택하되, 강좌를 위해서는 18정도로 설정한다.
3. 다국어 입력 허용 체크: 한글 입력을 위해 반드시 체크한다.
4. 오류 검사 활성화 체크: 코드에 오류가 있는지 확인하는 기능을 활성화한다.
5. 오류 메시지 표시 체크: 코드에 오류가 있을 때 메시지를 보여준다.
6. 코드 자동완성 익히기 체크: 코딩 편의를 위해 코드 자동완성 기능을 활성화한다.
7. 기타 설정: 필요한 경우 메모리 설정 등을 조정한다.

**주의 사항**

- 맥 사용자 중 한영 전환을 컨트롤 스페이스로 하는 경우, 한글 입력을 위해 컨트롤 스페이스를 사용하지 않아야 한다. 대신 커맨드 스페이스 등을 사용한다.
- 프로세싱에서 사용하는 메모리 설정은 기본적으로 256MB이며, 필요에 따라 늘릴 수 있다.

---

## **프로세싱 인터페이스 설명**

1. 실행 버튼: 코드를 실행하여 결과를 확인하는 버튼. 실행 중인 프로그램은 실행 창에 표시된다.
2. 정지 버튼: 실행 중인 프로그램을 종료하는 버튼.
3. 디버깅 버튼: 프로그램 오류를 확인하고 디버깅하는 기능. 초반에는 사용하지 않을 것이다.
4. 잡아 라고 되어 있는 부분: 프로세싱을 기반으로 하는 모드 선택. 기본적으로는 '잡아'를 선택한다.
5. 다른 모드 추가: 잡아 이외의 다른 언어나 모드를 선택하여 프로그래밍할 수 있다. 추가 모드는 나중에 필요에 따라 선택할 수 있다.

---

## **프로세싱 파일 저장**

1. 스케치 이름: 프로세싱 창 상단에 있는 파일 이름. 자동으로 현재 날짜와 시간으로 설정되며, 열 때마다 변경됨.
2. 저장하기: 커맨드 + S (또는 윈도우에서는 Ctrl + S)를 눌러 파일을 저장할 수 있음.
3. 저장 위치: 프로세싱 폴더 내의 기본 위치에 파일이 저장됨.
4. 저장된 파일 확인: 저장된 파일은 프로세싱 폴더 내에 동일한 이름의 폴더와 .pde 확장자 파일로 저장됨.
5. 이동 및 복사: 저장된 파일을 이동하거나 복사할 때는 폴더 전체를 이동해야 함. 프로세싱은 같은 이름의 폴더를 자동으로 생성하여 관리함.

---

## **프로세싱 파일 관리 및 인터페이스**

1. 새 탭 추가: 코드를 분리하여 관리할 수 있음.
2. 스케치 폴더 열기: 현재 프로세싱 파일이 저장된 위치를 열어줌.
3. 에러 및 콘솔창: 코드 실행 상태 및 오류 메시지를 표시하는 창.
4. 에러 창: 코드에서 발생한 오류 메시지를 정리하여 보여줌.
5. 프로세싱 기능: 그림 그리기 프로그램을 개발할 예정.

---

## **컴퓨터 그림 그리기와 프로그래밍**

1. 종이를 준비하는 것은 컴퓨터에서 그림을 그릴 때의 하나의 요소.
2. 컴퓨터는 그림을 그릴 도구가 아니므로 화면 크기를 결정해야 함.
3. **사이즈(size)** 명령어를 사용하여 화면의 크기를 설정함.
4. 사이즈 명령어의 형식은 **`사이즈(가로, 세로);`**로 이루어짐.
5. 명령어는 항상 세미콜론으로 끝나야 하며, 괄호 안에 매개변수를 넣어줌.
6. 함수는 컴퓨터에게 명령을 내리는 개념으로, 사이즈 명령어는 화면 크기를 설정하는 명령을 함.

---

## **프로그래밍 언어의 학습과 레퍼런스**

1. 프로그래밍 언어는 언어이므로 사용법을 알아야 함.
2. 명령어마다 필요한 매개변수의 개수가 다름.
3. 이를 알기 위해 레퍼런스(사전)를 참조해야 함.
4. 프로세싱 사이트의 레퍼런스는 사용 가능한 명령어들을 보여줌.
5. 명령어를 찾는 데 필요한 시간과 노력은 언어 학습과 유사.
6. 레퍼런스를 통해 필요한 명령어와 사용법을 익히면 됨.

---

## **프로세싱의 사이즈 설정과 레퍼런스 활용**

1. 프로세싱에서 사이즈를 설정하기 위해 **`size()`** 함수를 사용.
2. **`size()`** 함수는 가로와 세로 크기를 매개변수로 받음.
3. 명령어 사용 시 세미콜론을 붙여야 함.
4. 세미콜론은 키보드에서 엔터 키 왼쪽에 있음.
5. 프로세싱 사이트의 레퍼런스에서 명령어 사용법을 참조할 수 있음.
6. 레퍼런스와 튜토리얼을 통해 프로세싱을 학습할 수 있음.

---

## **프로세싱 레퍼런스 페이지 활용 방법**

1. 명령어에 대한 설명을 확인하려면 레퍼런스 페이지를 참조.
2. 각 명령어는 예제와 설명으로 구성되어 있음.
3. 사이즈 명령어는 윈도우의 크기를 설정하는 명령어로, 중간에 크기를 변경할 수 없음.
4. 명령어의 문법과 매개변수를 이해하고 사용해야 함.
5. 레퍼런스 페이지에서 명령어를 우클릭하여 찾기를 클릭하면 설명이 나옴.
6. 프로세싱 소프트웨어에 내장된 레퍼런스를 통해 인터넷 연결 없이도 확인 가능.

---

## **포인트, 라인, 면 그리기 예시**

1. 점 찍기: **`point()`** 명령어를 사용하여 좌표값을 지정하여 화면에 점을 찍을 수 있음.
2. 선 그리기: **`line()`** 명령어를 사용하여 두 점을 연결하여 직선을 그릴 수 있음.
3. 면 그리기: 다양한 도형을 그릴 수 있으며, 보통 사각형이나 다각형 모양으로 그림을 그릴 수 있음.

---

## **픽셀 위치에서 네모 그리기**

1. 네모 그리기: **`rect()`** 명령어를 사용하여 좌표와 너비, 높이를 지정하여 화면에 네모를 그릴 수 있음.
    - 매개변수: x 좌표, y 좌표, 너비, 높이
    - 예시: **`rect(200, 100, 250, 250)`**은 좌측 상단을 기준으로 x가 200, y가 100인 위치에서 너비 250, 높이 250의 네모를 그림.

---

# **프로세싱 2D 기본 도형 그리기**

1. 기본 도형 명령어:
    - point: 점
    - rect: 직사각형
    - arc: 호
    - circle: 원
    - ellipse: 타원
    - quad: 사각형
    - square: 정사각형
    - triangle: 삼각형
    - polygon: 다각형
2. 명령어 사용법:
    - 각 명령어는 다양한 매개변수를 필요로 한다.
    - ellipse의 경우 중심점과 너비, 높이를 지정해야 한다.
3. 실행 순서:
    - 프로그램은 위에서 아래로 순차적으로 실행된다.
    - 창을 만들고, 점을 찍고, 선과 도형을 그리는 순서로 실행된다.
    - 겹치는 도형은 순서를 조절하여 처리해야 한다.

---

## **색상 지정 방법**

1. 색상을 지정하는 방법:
    - 숫자 하나만 입력하여 색상을 지정할 수 있음.
    - stroke 명령어로 외곽선의 색상을 변경할 수 있음.
2. 색상 변경 순서:
    - 그림을 그리기 전에 색상을 먼저 선택해야 함.
    - 색상을 선택한 후에 그림을 그려야 선택한 색상이 적용됨.
3. 색상 값 범위:
    - 0에서 255 사이의 숫자를 입력하여 색상을 지정할 수 있음.
    - 이는 컴퓨터가 색상을 8비트 단위로 계산하기 때문임.
4. 색상 값의 이해:
    - 0부터 255까지의 숫자는 이진수로 표현됨.
    - 각 비트의 조합으로 다양한 색상을 표현할 수 있음.
5. 컴퓨터에서 색상을 처리하는 방식:
    - 색상은 8비트 단위로 계산됨.
    - 0에서 255 사이의 숫자로 색상을 지정해야 함.
6. 색상 값의 의미:
    - 0은 검정색, 255는 흰색을 나타냄.
    - 중간값은 회색으로 표시됨.
7. 빛의 삼원색:
    - 빨간색, 녹색, 파란색 값을 조합하여 원하는 색상을 만듦.
    - 각 색상에 대해 0에서 255 사이의 숫자로 밝기 값을 입력함.
8. 색상 선택의 불편함:
    - 숫자로 색상을 지정하는 것은 어려울 수 있음.
    - 색상 선택 도구를 사용하여 직관적으로 색상을 선택할 수 있음.
    - 선택한 색상의 RGB 값을 숫자로 입력하여 사용 가능함.

---

## **색상 변경 방법**

1. 외곽선 색상 변경:
    - **`stroke()`** 명령어를 사용하여 선의 색상을 변경할 수 있음.
    - 하나의 매개 변수로는 그레이 스케일 색상을, 세 개의 매개 변수로는 RGB 색상을 지정함.
2. 내부 면의 색상 변경:
    - **`fill()`** 명령어를 사용하여 면의 색상을 변경할 수 있음.
    - 하나의 매개 변수로는 그레이 스케일 색상을, 세 개의 매개 변수로는 RGB 색상을 지정함.
3. 색상 선택 방법:
    - 색상 선택 창을 통해 원하는 색상을 선택함.
    - 선택한 색상의 RGB 값을 **`stroke()`** 또는 **`fill()`** 명령어에 입력하여 색상을 변경함.

---

## **투명도 설정 방법**

1. 외곽선 색상의 투명도 설정:
    - **`stroke()`** 명령어를 사용하여 선의 색상을 변경하고, 투명도를 조절할 수 있음.
    - 마지막 매개 변수로 알파 값(투명도)을 지정함. 0은 완전히 투명, 255는 완전히 불투명을 나타냄.
2. 면의 색상의 투명도 설정:
    - **`fill()`** 명령어를 사용하여 면의 색상을 변경하고, 투명도를 조절할 수 있음.
    - 마지막 매개 변수로 알파 값(투명도)을 지정함. 0은 완전히 투명, 255는 완전히 불투명을 나타냄.
3. 투명도 설정 시 주의사항:
    - 색상을 선택할 때 알파 값도 함께 지정하여 투명도를 조절함.
    - **`noStroke()`** 명령어를 사용하여 외곽선을 없애거나, **`noFill()`** 명령어를 사용하여 면을 그리지 않음

---

## **색상과 투명도 설정 방법**

1. 선의 색상과 투명도 설정:
    - **`stroke()`** 명령어로 선의 색상과 투명도를 지정함.
    - **`noStroke()`** 명령어로 외곽선을 없앨 수 있음.
2. 면의 색상과 투명도 설정:
    - **`fill()`** 명령어로 면의 색상과 투명도를 지정함.
    - **`noFill()`** 명령어로 면을 그리지 않을 수 있음.
3. 투명도 설정 시 주의사항:
    - 색상 선택 시 알파 값(투명도)도 함께 지정해야 함.
    - **`noStroke()`** 명령어로 외곽선을 없앨 수 있음.
    - **`noFill()`** 명령어로 면을 그리지 않을 수 있음.

---

## **프로세싱 프로그래밍의 기본 구조**

1. **`setup()`** 함수: 프로그램 초기 설정 및 준비 단계를 처리하는 함수.
    - 프로그램 실행 시 한 번만 실행됨.
    - 화면 크기 설정 등 초기화 작업 수행.
2. **`draw()`** 함수: 그림 그리기 및 반복적인 작업을 처리하는 함수.
    - 프로그램 실행 후 계속해서 반복 실행됨.
    - 주로 그림 그리기, 반복 작업 등을 수행함.
3. 프로그램 실행 흐름:
    - **`setup()`** 함수는 프로그램 시작 시 한 번 실행되며, 초기화 작업을 수행함.
    - **`draw()`** 함수는 프로그램이 실행되는 동안 반복해서 실행되며, 그림 그리기와 반복 작업을 처리함.
4. 반복 작업:
    - 그림을 그리거나 반복 작업을 처리할 때는 **`draw()`** 함수 내부에 코드를 작성함.
    - 필요한 경우 반복 작업을 처리하는 코드를 중괄호 **`{}`**로 묶어서 구분함.
